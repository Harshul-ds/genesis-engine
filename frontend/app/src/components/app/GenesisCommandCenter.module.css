/*
  THE DEFINITIVE FULL-SCREEN & CENTERED CONTENT FIX
  This uses a modern CSS Grid layout to achieve both goals without conflict.
*/

.commandCenterContainer {
  width: 100vw;
  height: 100vh;
  background-color: var(--surface); /* The background color is on the main container */
  display: grid; /* Use Grid for the layout */
  grid-template-columns: 1fr minmax(auto, 960px) 1fr; /* Create three columns: flexible space, a centered content column, flexible space */
  overflow-y: auto; /* Allow the whole page to scroll if needed on small screens */
}

/* This is an empty selector to target the direct child for centering */
.commandCenterContainer > * {
  grid-column: 2; /* Place the .genesisCard into the centered middle column */
}

/*
  The Genesis Card no longer needs to worry about layout.
  It is just a simple container for your content.
*/
.genesisCard {
  width: 100%;
  padding-top: 5vh; /* Some space at the top */
  padding-bottom: 5vh; /* Some space at the bottom */
}

.headerContainer {
  text-align: center;
  margin-bottom: 2.5rem;
}

.header {
  font-family: var(--font-serif-display);
  font-size: 3.5rem;
  font-weight: 400;
  margin: 0;
  color: var(--on-surface-primary);
}

.subHeader {
  font-family: var(--font-sans);
  font-size: 1rem;
  font-weight: 500;
  color: var(--on-surface-secondary);
  letter-spacing: 0.5px;
  margin-top: 0.25rem;
}

.stepper {
  display: flex;
  justify-content: center;
  gap: 8px;
  margin: 1rem auto 1.5rem auto;
}
.stepDot {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background-color: var(--border);
}
.stepDot.active {
  background-color: var(--primary);
}

.stepContent {
  /* This div is no longer needed for layout, only for semantic grouping */
  width: 100%;
}

.themeToggle {
  position: fixed;
  top: 1rem;
  right: 1rem;
  /* ... rest of your theme toggle styles */
}
